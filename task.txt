Обратите внимание:

                - В среде IDE ( например, Eclipse)  есть возможность ввести параметры из командной строки.
                - Обработка ошибок должна быть сделана для всех заданий, если есть ввод параметров.
                - Введенные параметры и результаты работы должны выводиться на дисплей (вместе с соответствующими пояснениями, если это необходимо для понимания решенной задачи ).
                - Поток выполнения  имеет имя по умолчанию, которое нужно получить во время выполнения с помощью метода Thread.currentThread.getName().
                - 3 и 4 задания для потоков выполнения предполагают выполнение потоков четко по очереди.

1. Создать приложение с 3 параметрами. Необходимо определить  могут ли быть введенные параметры сторонами треугольника и вывести сообщение  в случае, если это невозможно  , о причине.
Вывести на дисплей введенные числа и полученный результат.

2. Создать приложение с 2 классами- А, B  и 2 интерфейсами I1, I2.
Класс А является родительским для класса B, Интерфейс I1 является родительским для интерфейса I2.
Класс A реализует интерфейс I1.
Класс В реализует интерфейс I2.
Интерфейс I1 содержит метод i1, класс А  содержит метод а1, интерфейс I2 содержит метод i2. Класс B содержит метод b1.
Все методы выводят строку с именем своего класса или интерфейса и именем метода.
 Создать минимальное число объектов для выполнения всех указанных 4 методов.
и выполнить все эти методы. Присвоить переменным типа I1  каждый из созданных объектов и еще раз выполнить все прежние методы для переменной типа I1(используя приведение типов).

3.  Создать 2 потока разными способами. Один из этих потоков увеличивает разделенную между потоками переменную на 1000,
а другой на 10 . Потоки работают попеременно.  Цикл для каждого потока выполняется число раз заданное параметром.
Нужно выводить для каждого потока его имя и значение измененной переменной. Выполнить задание   с использованием конструкции synchronized .
Не использовать в этом задании флаги для синхронизации потоков, а только методы wait и notify.
Также не использовать любые задержки для потоков после начала их работы в виде методов sleep, yield или wait c параметром.

4. Создать приложение с 2 параметрами. 1 параметр задает количество cтудентов, 2-ой параметр задает количество преподавателей.
каждый преподаватель строго по очереди приглашает любого студента.
Как только студент получает приглашение , то поток  студент заканчивается. Преподаватель становится после этого последним в очереди преподавателей на вызов студента .
Потоки - преподаватели должны работать строго по очереди.
Работа продолжается пока есть хоть один студент и если число преподавателей больше нуля.
Использовать ограничения из задания 3.
Выводить на дисплей имя преподавателя вместе с именем студента.
Выглядеть это будет примерно так: преподаватель1- студент3
                                  преподаватель2- студент1
                                  преподаватель1- студент4
                                  преподаватель2- студент2

5. Создать  приложение с пользовательским интерфейсом для заданий 1-4. Для этого приложения должна быть реализована возможность выбора из списка любого приложения и его выполнение.
Модифицировать задания 1-4 так, чтобы весь вывод происходил в текстовых областях .
Т. е это должно быть не приложение командной строки , а полностью  графическое приложение. Не используйте в приложении всплывающие окна.

6. Создать приложение для мобильного телефона, которое выводит треугольники разного  размера на каждое нажатие кнопки .

7. Создать бизнес-приложение или приложение-игру для мобильного телефона . В отчете необходимо
наличие титульного листа, диаграмм классов, описания предназначения классов и методов, скриншотов и кода приложения в конце.

